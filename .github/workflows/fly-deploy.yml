name: Nest Mono Repo Build

on:
  workflow_call:
    inputs:
      env_vars:
        description: 'Environment Variables'
        required: true
        default: '{}'
        type: string
    outputs:
      env-json-output:
        description: "The first output string"
        value: ${{ toJSON(jobs.fly-deploy.outputs.all-outputs) }}

env:
  ${{ fromJSON(inputs.env_vars) }}

jobs:
  fly-deploy:
    name: deploy
    runs-on: ubuntu-latest
    outputs:
      all-outputs: ${{ toJSON(steps.export-outputs.outputs) }}
    if: |
      (
        github.event_name == 'push' &&
        (
          github.ref == 'refs/heads/prod' ||
          github.ref == 'refs/heads/stage' ||
          github.ref == 'refs/heads/qa' ||
          github.ref == 'refs/heads/dev'
        )
      ) ||
      (
        github.event_name == 'pull_request' &&
        (
          github.event.pull_request.head.ref == 'prod' ||
          github.event.pull_request.head.ref == 'stage' ||
          github.event.pull_request.head.ref == 'qa' ||
          github.event.pull_request.head.ref == 'dev'
        ) &&
        github.event.pull_request.merged == true
      )
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Check AWS_ACCESS_KEY_ID secret
        run: |
          echo ${{ secrets.AWS_ACCESS_KEY_ID }}
          echo ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          echo $FLY_API_TOKEN
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Check ECR Connection
        run: |
          set -e
          aws ecr describe-repositories
      - name: Set up flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Fetch Image And Deploy
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: 'latest'
        run: |
          IFS=' ' read -ra DEPLOY_APPS_ARRAY <<< "$DEPLOY_APPS"
          echo "Build apps:"
          for app in "${DEPLOY_APPS_ARRAY[@]}"; do
            echo "Deploying $ECR_REGISTRY/$REPO_NAME-$app:$IMAGE_TAG image"
            IMAGE_URI=$ECR_REGISTRY/$REPO_NAME-$app:$IMAGE_TAG
            docker pull $IMAGE_URI
      #      echo "Here"
      #      echo "flyctl deploy --image $IMAGE_URI --app $REPO_NAME-$app-$NODE_ENV --remote-only"
      #      flyctl deploy --image $IMAGE_URI --app $REPO_NAME-$app-$NODE_ENV --remote-only
          done
      # - name: Export Outputs
      #   id: export-outputs
      #   run: |
      #     echo CHANGED_FILES=$CHANGED_FILES >> $GITHUB_OUTPUT
      #     echo CHANGE_ALL=$CHANGE_ALL >> $GITHUB_OUTPUT
      #     echo DEPLOY_APPS=$DEPLOY_APPS >> $GITHUB_OUTPUT
      #     echo CHANGED_FILES=$CHANGED_FILES >> $GITHUB_OUTPUT
      #     echo CHANGE_ALL=$CHANGE_ALL >> $GITHUB_OUTPUT
